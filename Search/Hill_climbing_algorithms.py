import numpy as np
import tkinter as tk
import time
import random
from matplotlib import cm
import matplotlib.colors as mcolors

# Create a sample height matrix
rows, cols = 50, 50
height_matrix = np.array(
    [[232, 14, 236, 168, 229, 66, 169, 92, 2, 139, 251, 188, 17, 211, 71, 212, 211, 222, 43, 105, 102, 222, 135, 43, 155, 130, 236, 28, 179, 236, 99, 158, 45, 243, 211, 179, 172, 187, 146, 226, 221, 163, 15, 138, 123, 247, 183, 232, 157, 81], 
    [50, 231, 61, 42, 253, 90, 233, 18, 113, 212, 217, 29, 153, 194, 68, 53, 82, 251, 11, 240, 49, 49, 54, 172, 51, 142, 97, 60, 89, 228, 222, 235, 78, 37, 204, 232, 253, 66, 17, 105, 227, 86, 193, 54, 203, 231, 153, 148, 6, 67],
     [147, 128, 218, 16, 111, 175, 32, 39, 58, 202, 220, 120, 76, 151, 56, 70, 39, 218, 160, 124, 14, 112, 32, 237, 67, 121, 41, 76, 223, 58, 216, 145, 130, 102, 118, 85, 181, 187, 8, 38, 78, 174, 126, 1, 32, 191, 102, 135, 192, 49], 
     [139, 105, 101, 108, 47, 42, 28, 46, 179, 130, 51, 48, 5, 13, 89, 5, 154, 178, 219, 241, 182, 223, 188, 10, 167, 121, 9, 38, 223, 130, 2, 74, 82, 137, 159, 68, 199, 107, 115, 13, 224, 214, 126, 103, 194, 35, 36, 96, 166, 170],
      [52, 233, 204, 11, 16, 17, 208, 20, 202, 136, 15, 87, 240, 97, 41, 219, 190, 180, 237, 65, 163, 90, 39, 67, 201, 102, 90, 93, 16, 182, 19, 209, 45, 93, 223, 46, 211, 39, 17, 204, 79, 144, 186, 100, 130, 182, 244, 49, 184, 51], 
      [28, 62, 47, 185, 209, 249, 220, 105, 237, 14, 250, 46, 58, 16, 85, 81, 95, 177, 76, 47, 185, 1, 112, 142, 131, 163, 162, 7, 43, 59, 77, 47, 203, 9, 101, 215, 167, 52, 29, 232, 191, 109, 84, 97, 28, 88, 188, 0, 93, 27], 
      [177, 103, 237, 23, 168, 249, 83, 28, 212, 196, 16, 226, 166, 139, 225, 169, 131, 31, 217, 97, 8, 101, 141, 199, 91, 197, 239, 204, 85, 47, 94, 151, 103, 182, 129, 48, 154, 49, 37, 30, 202, 59, 35, 152, 93, 91, 250, 7, 168, 201],
       [247, 22, 243, 45, 209, 91, 63, 34, 135, 107, 184, 98, 88, 34, 240, 205, 215, 103, 20, 86, 39, 152, 95, 250, 3, 109, 214, 210, 74, 218, 8, 111, 107, 195, 239, 54, 194, 29, 35, 43, 49, 117, 230, 124, 108, 188, 122, 88, 227, 231], 
       [43, 40, 128, 36, 241, 136, 8, 215, 4, 29, 167, 216, 44, 60, 82, 134, 119, 233, 176, 73, 60, 97, 111, 202, 51, 45, 145, 106, 62, 111, 237, 224, 127, 200, 53, 123, 224, 208, 65, 247, 77, 81, 126, 103, 29, 12, 140, 77, 255, 71],
       [166, 168, 63, 109, 10, 108, 123, 165, 193, 18, 248, 206, 42, 38, 191, 191, 135, 128, 111, 237, 199, 141, 137, 37, 192, 222, 198, 156, 104, 106, 111, 57, 204, 81, 68, 151, 38, 22, 106, 85, 32, 220, 153, 243, 193, 212, 221, 1, 74, 208],
       [73, 255, 251, 159, 100, 153, 70, 185, 76, 54, 85, 86, 24, 133, 145, 6, 107, 247, 129, 104, 113, 75, 91, 159, 66, 7, 111, 110, 17, 209, 58, 113, 100, 195, 230, 45, 251, 219, 66, 143, 99, 25, 247, 189, 110, 208, 85, 220, 60, 178], 
       [36, 236, 230, 227, 64, 137, 164, 22, 0, 244, 169, 77, 57, 218, 121, 248, 26, 36, 30, 189, 37, 196, 248, 144, 242, 112, 26, 83, 86, 27, 60, 20, 237, 3, 57, 220, 115, 228, 107, 142, 118, 243, 152, 195, 77, 74, 55, 195, 66, 55], 
       [55, 146, 78, 244, 39, 228, 94, 28, 26, 112, 74, 2, 62, 8, 87, 42, 115, 180, 196, 28, 251, 38, 100, 217, 110, 65, 186, 228, 80, 99, 126, 147, 182, 85, 243, 125, 159, 188, 105, 19, 198, 3, 127, 131, 126, 101, 248, 58, 204, 60], 
       [17, 160, 181, 41, 166, 63, 169, 232, 104, 51, 203, 83, 222, 148, 111, 201, 87, 15, 236, 120, 241, 81, 119, 197, 90, 50, 150, 189, 164, 232, 101, 241, 199, 22, 177, 239, 243, 84, 110, 144, 147, 132, 240, 108, 19, 43, 82, 29, 150, 238], 
       [227, 42, 88, 144, 194, 237, 8, 215, 212, 111, 115, 112, 239, 10, 93, 63, 78, 69, 188, 140, 47, 32, 154, 164, 211, 42, 240, 224, 47, 160, 37, 84, 218, 43, 77, 67, 19, 151, 109, 230, 220, 230, 219, 171, 188, 173, 98, 13, 147, 86], 
       [252, 228, 177, 152, 28, 250, 67, 176, 213, 173, 67, 1, 181, 221, 49, 96, 125, 100, 9, 156, 202, 102, 172, 156, 96, 251, 186, 212, 111, 171, 45, 199, 20, 99, 77, 241, 102, 72, 239, 167, 14, 2, 21, 145, 226, 105, 88, 119, 163, 153], 
       [243, 189, 14, 44, 15, 207, 246, 129, 163, 23, 3, 48, 200, 102, 48, 221, 73, 59, 105, 118, 132, 141, 88, 221, 213, 6, 127, 246, 16, 73, 30, 178, 127, 188, 78, 45, 14, 101, 131, 228, 220, 137, 57, 72, 187, 186, 166, 4, 146, 167], 
       [130, 209, 220, 25, 112, 100, 245, 100, 241, 98, 193, 150, 56, 239, 16, 5, 144, 163, 182, 16, 236, 52, 254, 61, 74, 115, 165, 165, 174, 249, 78, 75, 140, 40, 170, 247, 178, 5, 223, 83, 48, 249, 111, 7, 238, 101, 10, 173, 74, 61], 
       [187, 252, 99, 204, 53, 249, 179, 210, 180, 17, 120, 21, 36, 213, 144, 12, 67, 248, 232, 244, 16, 139, 74, 2, 2, 244, 252, 39, 21, 163, 80, 62, 192, 49, 149, 31, 8, 14, 239, 194, 166, 169, 39, 60, 238, 10, 39, 225, 248, 13], 
       [134, 36, 164, 181, 236, 12, 175, 165, 184, 254, 132, 158, 159, 19, 21, 42, 86, 28, 24, 12, 29, 103, 99, 102, 169, 36, 87, 69, 106, 169, 139, 0, 119, 73, 207, 33, 0, 235, 242, 125, 42, 19, 1, 173, 236, 104, 140, 196, 225, 145], 
       [195, 18, 60, 125, 198, 109, 208, 4, 134, 255, 9, 122, 54, 8, 118, 96, 139, 94, 185, 223, 213, 19, 22, 57, 92, 4, 180, 191, 8, 221, 7, 87, 17, 29, 41, 206, 245, 38, 241, 233, 108, 146, 131, 179, 109, 236, 13, 19, 0, 150], 
       [208, 54, 227, 95, 206, 88, 85, 243, 96, 137, 108, 204, 120, 185, 33, 144, 23, 197, 95, 178, 68, 225, 128, 201, 213, 17, 226, 203, 144, 69, 243, 93, 30, 96, 3, 85, 164, 173, 47, 144, 97, 41, 169, 93, 179, 247, 82, 183, 41, 53], 
       [212, 45, 253, 56, 172, 125, 231, 67, 84, 27, 187, 246, 226, 72, 250, 199, 215, 8, 151, 81, 130, 66, 86, 112, 154, 71, 194, 251, 193, 24, 0, 172, 65, 247, 131, 202, 117, 243, 126, 68, 161, 89, 27, 140, 141, 23, 211, 138, 93, 174], 
       [181, 96, 145, 153, 194, 253, 14, 197, 27, 128, 31, 242, 163, 97, 110, 33, 189, 217, 38, 31, 92, 59, 166, 161, 73, 174, 42, 14, 112, 151, 13, 137, 225, 205, 111, 30, 242, 60, 245, 11, 111, 89, 243, 28, 189, 211, 235, 161, 147, 221], 
       [13, 36, 210, 65, 199, 149, 167, 62, 51, 160, 31, 158, 107, 155, 140, 200, 249, 148, 197, 59, 81, 151, 131, 225, 97, 227, 208, 2, 99, 37, 222, 60, 198, 157, 103, 254, 53, 162, 247, 184, 71, 10, 90, 159, 215, 18, 228, 208, 42, 18], 
       [173, 161, 136, 138, 177, 56, 201, 167, 21, 50, 224, 113, 225, 178, 28, 151, 157, 11, 150, 197, 235, 138, 131, 229, 224, 88, 201, 11, 8, 26, 52, 238, 241, 223, 49, 126, 159, 46, 41, 149, 5, 137, 130, 8, 138, 157, 196, 34, 0, 189], 
       [120, 35, 157, 109, 57, 113, 59, 138, 0, 180, 116, 184, 56, 37, 163, 83, 120, 60, 139, 22, 214, 165, 146, 193, 35, 105, 9, 87, 220, 29, 240, 49, 12, 124, 154, 145, 209, 243, 201, 125, 83, 163, 105, 11, 24, 200, 19, 137, 68, 219], 
       [154, 1, 37, 29, 100, 121, 20, 110, 254, 98, 8, 0, 255, 216, 60, 185, 95, 11, 162, 134, 199, 36, 133, 24, 168, 219, 29, 49, 232, 135, 188, 217, 125, 248, 24, 137, 31, 71, 90, 144, 199, 239, 81, 161, 139, 166, 96, 102, 148, 17], 
       [163, 180, 228, 138, 83, 179, 47, 137, 91, 121, 52, 102, 144, 38, 77, 172, 189, 210, 209, 111, 0, 88, 177, 112, 233, 71, 27, 236, 100, 222, 90, 47, 174, 40, 43, 103, 18, 62, 100, 216, 20, 248, 69, 92, 239, 144, 252, 101, 214, 66], 
       [88, 40, 111, 212, 80, 25, 186, 55, 128, 89, 107, 65, 161, 170, 171, 90, 21, 149, 74, 173, 120, 206, 80, 125, 198, 96, 160, 19, 248, 0, 138, 142, 95, 114, 175, 4, 25, 233, 201, 179, 106, 225, 6, 136, 107, 136, 117, 203, 161, 100], 
       [217, 66, 167, 224, 148, 237, 97, 72, 106, 24, 2, 138, 50, 248, 199, 109, 150, 120, 128, 148, 111, 34, 198, 181, 251, 239, 88, 53, 99, 138, 233, 130, 80, 253, 144, 122, 36, 221, 100, 122, 27, 61, 53, 229, 124, 230, 123, 207, 211, 152], 
       [29, 16, 196, 234, 65, 226, 182, 154, 54, 150, 29, 121, 135, 186, 139, 136, 0, 220, 237, 176, 149, 152, 133, 98, 146, 159, 54, 247, 26, 199, 104, 240, 194, 98, 162, 64, 244, 145, 121, 175, 209, 27, 242, 99, 59, 193, 94, 62, 138, 52], 
       [74, 44, 19, 137, 226, 172, 77, 117, 129, 8, 184, 56, 160, 26, 90, 167, 230, 183, 57, 96, 1, 181, 173, 20, 47, 33, 121, 47, 48, 220, 172, 62, 118, 71, 140, 17, 254, 33, 0, 204, 80, 251, 218, 253, 52, 32, 3, 243, 116, 115], 
       [132, 12, 247, 68, 205, 105, 190, 84, 101, 166, 213, 20, 170, 211, 139, 174, 251, 43, 95, 84, 132, 150, 183, 250, 152, 147, 13, 136, 167, 149, 113, 81, 253, 46, 67, 168, 126, 166, 157, 245, 48, 66, 128, 161, 66, 221, 39, 172, 162, 57], 
       [37, 214, 73, 3, 17, 23, 124, 204, 27, 143, 94, 181, 222, 49, 13, 193, 13, 54, 155, 245, 110, 219, 194, 2, 17, 129, 234, 152, 199, 170, 99, 119, 127, 92, 74, 233, 253, 114, 22, 228, 100, 169, 80, 75, 232, 242, 238, 242, 253, 254], 
       [2, 184, 172, 70, 162, 26, 237, 82, 140, 35, 46, 208, 166, 166, 155, 8, 45, 219, 186, 242, 128, 4, 164, 121, 153, 94, 34, 30, 188, 24, 188, 39, 241, 26, 121, 108, 234, 172, 168, 202, 192, 142, 214, 241, 99, 57, 131, 206, 211, 16], 
       [22, 207, 181, 229, 204, 48, 44, 227, 206, 117, 57, 68, 118, 229, 108, 130, 93, 27, 57, 115, 152, 56, 4, 152, 76, 139, 16, 25, 252, 181, 92, 86, 201, 55, 89, 107, 124, 226, 161, 49, 4, 244, 178, 137, 210, 213, 242, 199, 50, 70], 
       [87, 183, 176, 165, 249, 144, 12, 165, 145, 183, 77, 128, 226, 46, 211, 27, 112, 171, 179, 32, 72, 53, 133, 81, 193, 213, 132, 56, 123, 13, 27, 81, 150, 34, 136, 96, 130, 34, 62, 147, 65, 197, 118, 35, 161, 231, 156, 2, 177, 75], 
       [182, 147, 144, 56, 98, 5, 7, 173, 224, 209, 83, 211, 140, 50, 28, 212, 88, 74, 152, 248, 36, 226, 84, 124, 143, 247, 209, 29, 151, 141, 12, 157, 122, 17, 146, 81, 197, 106, 96, 12, 229, 108, 22, 56, 148, 113, 184, 170, 164, 66], 
       [141, 48, 76, 230, 6, 220, 58, 171, 158, 160, 169, 84, 55, 246, 107, 244, 248, 39, 15, 79, 10, 131, 143, 22, 66, 161, 42, 190, 110, 195, 183, 140, 100, 230, 83, 146, 90, 249, 99, 177, 157, 66, 87, 162, 102, 26, 22, 179, 199, 194], 
       [103, 99, 175, 240, 181, 185, 116, 3, 219, 185, 66, 176, 29, 139, 35, 234, 155, 223, 68, 147, 119, 31, 211, 8, 83, 206, 215, 42, 169, 204, 142, 237, 19, 234, 134, 116, 137, 72, 197, 6, 53, 174, 205, 31, 42, 169, 107, 66, 81, 74], 
       [81, 146, 187, 208, 117, 103, 221, 90, 59, 22, 83, 56, 109, 56, 72, 240, 7, 229, 211, 197, 161, 250, 254, 21, 120, 74, 64, 42, 107, 219, 34, 245, 70, 203, 85, 95, 238, 204, 84, 18, 131, 95, 54, 147, 246, 143, 3, 141, 105, 238], 
       [208, 74, 194, 151, 213, 131, 54, 17, 69, 199, 173, 224, 72, 187, 1, 107, 228, 139, 99, 56, 215, 93, 217, 76, 187, 91, 124, 124, 80, 162, 88, 182, 83, 80, 48, 172, 163, 56, 210, 11, 139, 228, 54, 224, 150, 251, 83, 116, 27, 176], 
       [128, 41, 106, 70, 101, 180, 117, 22, 245, 251, 179, 8, 194, 102, 49, 75, 96, 91, 144, 159, 192, 48, 165, 115, 52, 201, 136, 8, 109, 37, 17, 120, 84, 28, 50, 172, 204, 72, 57, 163, 64, 142, 118, 127, 172, 20, 178, 78, 14, 85], 
       [69, 203, 49, 181, 165, 34, 187, 4, 196, 187, 25, 208, 225, 106, 148, 249, 42, 126, 144, 175, 56, 107, 235, 100, 250, 210, 78, 217, 65, 220, 195, 179, 67, 144, 76, 217, 92, 167, 197, 115, 95, 173, 193, 30, 95, 65, 82, 214, 220, 162], 
       [24, 127, 16, 194, 34, 234, 11, 53, 73, 107, 23, 229, 72, 76, 88, 185, 2, 252, 9, 37, 198, 136, 190, 222, 89, 214, 230, 21, 149, 86, 4, 156, 32, 210, 210, 150, 106, 153, 83, 238, 18, 7, 32, 108, 193, 210, 93, 237, 157, 234], 
       [236, 214, 74, 229, 119, 200, 247, 144, 29, 4, 185, 254, 249, 182, 117, 104, 88, 69, 233, 82, 164, 42, 235, 165, 141, 17, 68, 62, 3, 90, 151, 9, 7, 103, 97, 76, 134, 144, 232, 68, 174, 232, 64, 35, 49, 108, 77, 201, 197, 137], 
       [170, 31, 237, 241, 135, 54, 217, 147, 29, 95, 217, 113, 73, 239, 171, 130, 121, 4, 105, 21, 202, 4, 88, 15, 133, 18, 153, 192, 238, 159, 187, 145, 1, 226, 13, 21, 117, 195, 121, 231, 30, 41, 79, 241, 184, 85, 251, 24, 16, 164], 
       [90, 222, 83, 18, 82, 20, 16, 105, 53, 175, 204, 184, 19, 156, 147, 109, 182, 222, 144, 205, 138, 190, 202, 13, 16, 159, 88, 134, 230, 183, 206, 217, 171, 74, 212, 180, 58, 91, 219, 35, 170, 74, 204, 28, 126, 186, 105, 9, 215, 79], 
       [180, 198, 20, 32, 28, 87, 195, 220, 100, 62, 226, 213, 154, 51, 204, 124, 216, 214, 23, 82, 217, 73, 111, 114, 107, 176, 16, 205, 230, 15, 240, 84, 17, 170, 23, 70, 187, 70, 207, 175, 167, 78, 233, 225, 129, 55, 34, 110, 197, 197]])

# Normalize height values to (0,1) for colormap
def normalize(matrix):
    return (matrix - np.min(matrix)) / (np.max(matrix) - np.min(matrix))

height_matrix = normalize(height_matrix)

# Custom colormap (blue -> earth -> white)
cmap = mcolors.LinearSegmentedColormap.from_list("geo", [(0, "blue"), (0.5, "saddlebrown"), (1, "white")])

class RandomWalkApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Random Walk Geographic Visualization")
        
        # Canvas for visualization
        self.canvas = tk.Canvas(root, width=cols * 10, height=rows * 10)
        self.canvas.pack()
        
        # Speed control slider
        self.speed_var = tk.IntVar(value=100)
        self.speed_slider = tk.Scale(root, from_=20, to=500, orient="horizontal", label="Speed (steps/sec)", variable=self.speed_var)
        self.speed_slider.pack()
        
        # Start button
        self.start_button = tk.Button(root, text="Start", command=self.start_walk)
        self.start_button.pack()
        
        # Trail intensity to track visits
        self.trail_intensity = np.zeros((rows, cols))
        
        # Initial walker position (center of the grid)
        self.walker_x, self.walker_y = rows // 2, cols // 2
        
        self.running = False
        self.draw_grid()
    
    def draw_grid(self):
        self.canvas.delete("all")
        for i in range(rows):
            for j in range(cols):
                # Get height color
                height_val = height_matrix[i, j]
                color = mcolors.rgb2hex(cmap(height_val))
                
                # Add red transparency based on trail visits
                red_intensity = min(255, int(self.trail_intensity[i, j] * 15))  # Transparent red effect
                if red_intensity > 0:
                    red_overlay = f'#{red_intensity:02x}0000'
                    self.canvas.create_rectangle(j * 10, i * 10, (j + 1) * 10, (i + 1) * 10, fill=red_overlay, outline=color)
                else:
                    self.canvas.create_rectangle(j * 10, i * 10, (j + 1) * 10, (i + 1) * 10, fill=color, outline="gray")
        
    def start_walk(self):
        if not self.running:
            self.running = True
            self.walk()
    
    def walk(self):
        if not self.running:
            return
        
        # Random move (up, down, left, right)
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        dx, dy = random.choice(directions)
        
        new_x, new_y = self.walker_x + dx, self.walker_y + dy
        
        if 0 <= new_x < rows and 0 <= new_y < cols:
            self.walker_x, self.walker_y = new_x, new_y
            self.trail_intensity[self.walker_x, self.walker_y] += 1  # Increase visit count
        
        self.draw_grid()
        self.canvas.create_oval(self.walker_y * 10 + 3, self.walker_x * 10 + 3, self.walker_y * 10 + 7, self.walker_x * 10 + 7, fill="black")
        
        speed = self.speed_var.get()
        self.root.after(int(1000 / speed), self.walk)

if __name__ == "__main__":
    root = tk.Tk()
    app = RandomWalkApp(root)
    root.mainloop()